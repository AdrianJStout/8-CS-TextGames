#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil

#+TITLE: Text Based Games
#+AUTHOR: Marc Scott

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/MarcScott/8-CS-TextGames">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="assessment.html">Assessment</a></li>

    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Nim - the full game
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

- Nim is generally considered to be the first computer game ever created.
- In the 1950s a specialist computer called NIMROD was designed and built just to play the game of Nim.
[[https://www.wired.com/images_blogs/gamelife/2010/06/nimrod.jpg]]
- This was the Xbox of the 50s.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Nim is a fairly simple game. Two players take it in turns to remove counters from one of three (or more) heaps.
- The person who removes the last counter is considered the winner (in normal play).
- A typical game of Nim would look something like this...
#+begin_src
|Heap 1|Heap 2|Heap 3|       Move
 
   3      4      5           Bob   takes 2 from A
   1      4      5           Alice takes 3 from C
   1      4      2           Bob   takes 1 from B
   1      3      2           Alice takes 1 from B
   1      2      2           Bob   takes entire A heap, leaving two 2s.
   0      2      2           Alice takes 1 from B
   0      1      2           Bob   takes 1 from C leaving two 1s.
   0      1      1           Alice takes 1 from B
   0      0      1           Bob   takes entire C heap and wins.
#+End_src
- You're going to code a 2 player game of Nim using Python.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- The first couple of lines of code you should be able to handle yourself.
- Use a print statement to tell the players the rules of the game.
- It should read as follows
#+begin_src
Choose a number to move and a heap to move it from, seperated by a space
#+end_src
- Then print an empty line, followed by a third print statement for the heaps.
#+begin_src
|Heap 1|Heap 2|Heap 3|Move
#+end_src
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- We need to store the number of counters in each heap some how.
- A list would be a sensible data structure to use.
- Add the following line to your code, beneath your print statements. Don't forget that lists are indexed from 0, so the number of counters in =Heap 1= are accessed using =heaps[0]= and the counters in =Heap 3= are accessed using =heaps[2]=.
#+begin_src python
heaps = [6,7,8]
#+end_src
- In the game example above the previous move is reported back to the players each time. We'll use a variable called =move= to store each players move, and set it to =No move yet= at the start of the game.
#+begin_src python
move = 'No move yet'
#+end_src
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- We're now in a positionm for the players to start the game.
- We need the game to run until there are no counters left in any of the heaps. So while the sum of the heaps is greater than 0 we need the game to keep playing.
- To do this we'll use a =while= loop.
** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

#+begin_src python
while heaps[1]+heaps[2]+heaps[3] < 0:
#+end_src
- Look at the =while= loop above. THere are a couple of logical errors in the loop.
- Rewrite the loop so that it is correct.
- Adding up the individual elements of the list is a little laborious. Do some online research and see if there is an easier way of totalling the elements of a list in Python 3 that we could use instead.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

