#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil

#+TITLE: Text Based Games
#+AUTHOR: X Ellis

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/MarcScott/8-CS-TextGames">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="homework.html">Homework</a></li>

    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Hangman
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

- In this lesson you're going to create a version of hangman, that you can play against the computer.
- We are going to use *decompostion* to break down the problem into small solvable tasks.
- Each those small tasks will be then *implemented* as a *function*
- Let's have a little look at the logic of the game.
  1. The word should be displayed with =_= in place of each letter.
  2. The player should guess a letter.
  3. If the letter is in the word, then the =_= should be replaced with the letter, and we should store how many correct letters the player has guessed (This takes into account repeats).
  5. If the letter is not in the word, then the gallows can begin to be drawn.
  6. The player should be asked for another letter.
  7. The game ends when the player has made correct guesses that equal the length of the word, or the last stage of the gallows has been drawn.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Lets start with the simplest and fun task of all - create and display the gallows.
- You are going to create the gallows by finishing off the stages below.
- The task of *display* the gallows will be implemented using a *function*
- We need to use ASCII characters to create the graphic that is displayed on the screen.
- We'll assign variables to have the values of the graphic.
- The first couple have been done for you in the code below.
- In python we use ='''= to print multi-line strings.
#+begin_src python
stage0=''
stage1 = '''
_______________'''
stage2 = '''
|
|
|
|
|
|
|\______________'''
stage3 = '''
__________
|/
|
|
|
|
|
|\______________'''
#+end_src
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Use ASCII to create the rest of the stages. The number of stages you have is obviously up to you.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Now that you have all the stages of the hangman graphic, we need a way of easily printing out a specific stage as the game progresses.
- Probably the best way of doing this is to use a list.
  #+begin_src python
stage = [stage0,stage1,stage2,stage3,stage4,stage5,stage6,stage7,stage8]
  #+end_src
- the above list variable *stage* has 9 elements/items in it. Yours may be different depending on your own gallow design.
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Each item in the stage list has a position number called =index=
- To get stage4, you use =stage[4]=
- Let's try printing out some stages from your game.
- Save you file as =Hangman.py= and then run it.
- Switch over to the =interpreter= and then try accessing various stages of your graphic in the following way.
#+begin_src python
print(stage[4])
#+end_src
- If you need more help with this task, have a look at [[https://www.bournetocode.com/projects/CS-PythonKeySkills/pages/1_Part.html#sec-1-4][this]]
- Make sure that each of your stages print out correctly.

** Key Points Check 1 - tick if you have done the item
:PROPERTIES:
:HTML_CONTAINER_CLASS: key
:END: 
#+BEGIN_HTML html
<div class='checkItem'>
<input type='checkbox'> You have created all the ASCII art stages<br>
<input type='checkbox' > You have created a list variable <em>stage</em> that has all the stage variables<br>
<input type='checkbox' > You have checked each stage can be printed out correctly<br>
</div>
#+END_HTML
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- As in real game play, we need to:
  - come up with a word for the game
  - Ask the player for a guess
  - keep track of the number of failed guesses. This can be achieved by using a variable
  - keep track of correctly guessed letters.  This means we need to store the correct guessed letters. Everytime the player guessed correctly, we add the letter to the list of guessed letters.
  - We need to create a list and append the correctly guessed letter to the list.
- add to your existing Hungman.py code:
  
   #+begin_src python
    # create an empty list
    word= "hello"
    numOfAttempts = 0
    correctLetters = []
    
    playerGuess = input ("Guess a letter: ")
   #+end_src
  - check if playerGuess is one of the letters in the word, if it is, add it to the correctLetters list, otherwise we need to add 1 to the numOfAttempts.
    #+begin_src python

   if playerGuess in word:
       correctLetters.append(playerGuess)
   else:
       numOfAttempts += 1
    #+end_src
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Now we are going to use *decomposition* skill from our problem solving unit to tackle another problem.
- We are going to implement the solvable small task as a function
- Functions are blocks of code that perform a specific task - in this case, a function to display the stage ASCII art for a given index.
- the idea is when a user pick the wrong letter in the game for the certain number of time, the corresponding stage is displayed.
- In Python we create a function using the keyword =def= followed by the function name.
- Add to your Hungam.py code the following:
#+begin_src python

# define the function

def displayStage(numOfAttempts):
    print(stages[numOfAttempts])
#+end_src
- the above function only performs one thing - to print out the appropriate gallow depending on how many failed attempts the player current has.
- the variable *numOfAttempts* is called a parameter to the function - our function displayStage needs in order to print out the correct gallow stage.
- a function is not going to perform its designed task UNTIL it is being called.
- to call a function, you simply refer to its name and supply the neccessary parameters:
#+begin_src python

# call the function to actually use it
# numOfAttempts is called parameter

displayStage(numOfAttempts)
#+end_src
** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:
- Run your code to make sure it works
- So far failed attempts should lead to display different stage while successful guess will not advance the stages.
** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: silver
:END:
- complete the above steps so that:
  - you have create the variable numOfAttempts, word and a list called guessedLetter.
  - a player can input a letter.
  - you have added the displayStage function to your code.
  - Tested your code and you should see the correct stage is printed for failed and successdful guesses.
  - this[[https://www.bournetolearn.com/quizzes/y8-textGames/Lesson_4/Silver/index.php][ self-assessment quiz]]when you have done running each of the code.

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Next, we will create another function to perform another specific task for us, that is to print out the word that the user is guessing. If a letter has been guessed, then it should be displayed, otherwise we should display an =_=.
- We'll start by giving the function a name.
#+begin_src python
def displayWord():
#+end_src
- The first thing the function should do is:
  1. Declare a variable called =display= and assign it the value of an empty string =''=
  2. For every letter in the word, we add a "_ " to the *display* variable to form a single string that is a underscore followed by a space to make easy reading.
  3. **NOTE:** the function should be defined before it is called. Place your function definition just after the line where you created the empty list correctLetters.
#+BEGIN_HTML

<iframe src="https://trinket.io/embed/python/9a2bff2d03" width="100%" height="300" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>

#+END_HTML

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:
- Add the above code to your Hungman.py
- Run your program and check your code works.
- You should see 5 =_ = characters printed.
** Key Points Check 2 - tick if you have done the item
:PROPERTIES:
:HTML_CONTAINER_CLASS: key
:END: 
#+BEGIN_HTML html
<div class='checkItem'>
<input type='checkbox'> You have passed the key points check 1<br>
<input type='checkbox' > You have a function called <em>displayStage</em> and you have tested it works<br>
<input type='checkbox' > You have another function called <em>displayWord</em> and you have tested it works<br>
</div>
#+END_HTML


** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- The next step is to make the function * displayWord* more intelligent.
  - it will check if each letter in the word is in the correctLetters list
  - if it is, it will add it to the display string, else it will add a "_ "
#+begin_src python
def displayWord():
  display = ""
  
  for letter in word:
    if letter not in correctLetters:
      display += "- "
    else: 
       display += letter
    
  print(display)
    
#+end_src
- Save your updated file
** Key Points Check 3 - tick if you have done the item
:PROPERTIES:
:HTML_CONTAINER_CLASS: key
:END: 
#+BEGIN_HTML html
<div class='checkItem'>
<input type='checkbox'> You have passed the key points check 1 and 2<br>
<input type='checkbox' > You have updated your displayWord function as instructed above<br>
<input type='checkbox' > Your code structured in the following order<br>
</div>
#+END_HTML

- variables and lists are defined at the start
- followed by the two functions definitions
- followed by playerGuess input
- then, the if statement for checking if the playerGuess is in the word
- followed by the two function calls to the displayWord and displayStage
** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: gold
:END:
- Once you have finished the above code and tested it works, upload your work and take this [[https://www.bournetolearn.com/quizzes/y8-textGames/Lesson_4/Gold/index.php][self-assessment quiz]].
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: platinum
:END:      
- Our game so far only allows player to have one go.
- We need to keep asking the player to guess until:
  1. Either the player has guessed all letters before the final stage, 
  2. Or, the numOfGuesses has reached the maximum number of stages you have. 
- We are going to use a Boolean variable =gameOn= to indicate if we need to ask the player for more guesses or not.
- Use a while loop to keep asking the player to guess if gameOn is True

- The basic concept will be:
  1. If the length of the word being guessed is equal to the value of =correctLetters= then we can print out the current stage, and a message that the player has won, and finally change the =gameOn= variable to False.
  2. If the =numOfAttempts= is equal to 8 (or whatever the final stage you have, then we should print out the current stage, send a message that the player has lost, and then set =gameOn= to false.
- Try to improve your game so the above logic will be implemented
- When you have done and tested your function worked, upload and take this [[https://www.bournetolearn.com/quizzes/y8-textGames/Lesson_4/Platinum/index.php][self-assessment quiz]].

